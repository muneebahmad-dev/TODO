[{"/home/muneeb/PERN_stack/TODO/FrontPage/src/index.js":"1","/home/muneeb/PERN_stack/TODO/FrontPage/src/App.js":"2","/home/muneeb/PERN_stack/TODO/FrontPage/src/serviceWorker.js":"3"},{"size":430,"mtime":1606397896504,"results":"4","hashOfConfig":"5"},{"size":1476,"mtime":1621764217518,"results":"6","hashOfConfig":"5"},{"size":5085,"mtime":499180500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1odmd0e",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/home/muneeb/PERN_stack/TODO/FrontPage/src/index.js",[],["16","17"],"/home/muneeb/PERN_stack/TODO/FrontPage/src/App.js",["18","19","20","21"],"/home/muneeb/PERN_stack/TODO/FrontPage/src/serviceWorker.js",[],["22","23"],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":3,"column":3,"nodeType":"30","messageId":"31","endLine":3,"endColumn":14},{"ruleId":"28","severity":1,"message":"32","line":5,"column":3,"nodeType":"30","messageId":"31","endLine":5,"endColumn":13},{"ruleId":"33","severity":1,"message":"34","line":17,"column":3,"nodeType":"30","endLine":17,"endColumn":12,"suggestions":"35"},{"ruleId":"33","severity":1,"message":"36","line":17,"column":13,"nodeType":"37","endLine":25,"endColumn":4},{"ruleId":"24","replacedBy":"38"},{"ruleId":"26","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'InputLabel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["42"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["40"],["41"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Add dependencies array: []",{"range":"45","text":"46"},[528,528],", []"]